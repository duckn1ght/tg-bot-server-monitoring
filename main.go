package main

import (
	"crypto/tls"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

type Config struct {
	botToken      string
	serverURL     string
	checkInterval time.Duration
}

type Bot struct {
	config      *Config
	api         *tgbotapi.BotAPI
	activeChats sync.Map
}

const activeChatsFile = "active_chats.json"

// saveActiveChats —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
func (b *Bot) saveActiveChats() error {
	chats := make([]int64, 0)
	b.activeChats.Range(func(key, value interface{}) bool {
		chats = append(chats, key.(int64))
		return true
	})

	data, err := json.Marshal(chats)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —á–∞—Ç–æ–≤: %w", err)
	}

	if err := os.WriteFile(activeChatsFile, data, 0644); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤: %w", err)
	}

	return nil
}

// loadActiveChats –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
func (b *Bot) loadActiveChats() error {
	data, err := os.ReadFile(activeChatsFile)
	if err != nil {
		if os.IsNotExist(err) {
			return nil // —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
		}
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —á–∞—Ç–æ–≤: %w", err)
	}

	var chats []int64
	if err := json.Unmarshal(data, &chats); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–Ω–º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —á–∞—Ç–æ–≤: %w", err)
	}

	for _, chatID := range chats {
		b.activeChats.Store(chatID, true)
		log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: %d", chatID)
	}

	return nil
}

func loadConfig() (*Config, error) {
	if err := godotenv.Load(); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %w", err)
	}

	interval, err := strconv.Atoi(os.Getenv("CHECK_INTERVAL"))
	if err != nil {
		interval = 60000 // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1 –º–∏–Ω—É—Ç–∞
	}

	return &Config{
		botToken:      os.Getenv("TELEGRAM_BOT_TOKEN"),
		serverURL:     os.Getenv("SERVER_URL"),
		checkInterval: time.Duration(interval) * time.Millisecond,
	}, nil
}

func (b *Bot) handleUpdates() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID

		switch update.Message.Command() {
		case "start":
			b.activeChats.Store(chatID, true)
			msg := tgbotapi.NewMessage(chatID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
			b.api.Send(msg)
			log.Printf("–ù–æ–≤—ã–π —á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: %d", chatID)
			if err := b.saveActiveChats(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: %v", err)
			}

		case "stop":
			b.activeChats.Delete(chatID)
			msg := tgbotapi.NewMessage(chatID, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
			b.api.Send(msg)
			log.Printf("–ß–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: %d", chatID)
			if err := b.saveActiveChats(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: %v", err)
			}

		case "status":
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ %s\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %v",
				b.config.serverURL, b.config.checkInterval))
			b.api.Send(msg)
		}
	}
}

func (b *Bot) checkServer(client *http.Client) {
	resp, err := client.Get(b.config.serverURL)

	var errorMsg string
	if err != nil {
		errorMsg = fmt.Sprintf("üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!\n\nURL: %s\n–°–æ–æ–±—â–µ–Ω–∏–µ: %s\n–í—Ä–µ–º—è: %s",
			b.config.serverURL, err.Error(), time.Now().Format(time.RFC3339))
		log.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", err)
	} else if resp.StatusCode >= 400 {
		errorMsg = fmt.Sprintf("üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!\n\nURL: %s\n–°—Ç–∞—Ç—É—Å: %d\n–í—Ä–µ–º—è: %s",
			b.config.serverURL, resp.StatusCode, time.Now().Format(time.RFC3339))
		log.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
	} else {
		log.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: OK")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
	b.activeChats.Range(func(key, value interface{}) bool {
		chatID := key.(int64)
		msg := tgbotapi.NewMessage(chatID, errorMsg)
		if _, err := b.api.Send(msg); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç %d: %v", chatID, err)
		} else {
			log.Printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d", chatID)
		}
		return true
	})
}

func main() {
	config, err := loadConfig()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	api, err := tgbotapi.NewBotAPI(config.botToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}

	bot := &Bot{
		config: config,
		api:    api,
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
	if err := bot.loadActiveChats(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go bot.handleUpdates()

	client := &http.Client{
		Timeout: 10 * time.Second,
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{
				InsecureSkipVerify: true,
			},
		},
	}

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ %s", config.serverURL)
	log.Printf("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %v", config.checkInterval)

	// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
	ticker := time.NewTicker(config.checkInterval)
	defer ticker.Stop()

	for range ticker.C {
		bot.checkServer(client)
	}
}
